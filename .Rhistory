for (i in 1:n.rows){
for (j in 1:n.cols) {
output.frame[i,j] <- ICD9.5digit.ahrq(input.frame[i,j])
}
}
return(output.frame)
}
apply.convert.na <- function(input.frame) {
convert.na <- function(input.val) {
if (is.na(input.val)) {input.val <- 0}
output.val <- input.val
return(output.val)
}
n.rows <- length(input.frame[,1])
n.cols <- length(input.frame[1,])
output.frame <- matrix(0, nrow=n.rows, ncol=n.cols)
for (i in 1:n.rows){
for (j in 1:n.cols) {
output.frame[i,j] <- convert.na(input.frame[i,j])
}
}
return(output.frame)
}
# The following function develops a matrix with rows devoted to respondents and each
# column a comorbidity.
points.ahrq <- function(input.frame) {
#create lists of comorbidities
chf <- c(398.91,seq(from=428, to=428.9, by=0.01), 402.01,402.11,402.91, 404.01,404.11,404.91, 404.03,404.13,404.93)
valve <- c(seq(from=93.2, to=93.24, by=0.01),seq(from=394, to=397.1, by=0.01),397.9,seq(from=424, to=424.99, by=0.01),seq(from=746.3, to=746.6, by=0.01))
pulm.circ <- c(seq(from =415.11, to=415.19, by=0.01),seq(from=416, to=416.9, by=0.01), 417.9)
pvd <- c(seq(from=440, to=440.9, by=0.01),seq(from=440.0, to=441.9, by=0.01),seq(from =442.0, to=442.9, by=0.01),seq(from =443.1, to=443.9, by=0.01),444.21,441.22,447.1,449.0,557.1,557.9)
htn <- c(401.1,401.9,seq(from =642.00, to=642.04, by=0.01),401.0,437.2,seq(from =642.20, to=642.24, by=0.01),402.0,402.1,402.9,405.09,405.19,405.99, 402.01,402.11,402.91, 403.0,403.1,403.9,405.01,405.11,405.91,seq(from=642.10, to=642.14, by=0.01),403.01,403.11,403.91, 404.0,404.1,404.9, 404.01,404.11,404.91, 404.02,404.12,404.92, 404.03,404.13,404.93, seq(from =642.7, to=642.74, by=0.01),seq(from =642.9, to=642.94, by=0.01))
paralysis <- c(seq(from =342, to=344.9, by=0.01), seq(from=438.20, to=438.53, by=0.01),780.72)
neuro.other <- c(seq(from=330.0, to=331.9, by=0.01),332,333.4,333.5,333.7,333.71,333.72,333.79,333.85,333.94,seq(from=334.0, to=335.9, by=0.01),338.0,340.0,seq(from=341.1, to=341.9, by=0.01),seq(from=345.0, to=345.11, by=0.01),seq(from =345.2, to=345.3, by=0.01),seq(from=345.4, to=345.91, by=0.01),347.0,347.01,347.10,347.11,seq(from =649.4, to=649.44, by=0.01),786.7,seq(from =786.7, to=786.73, by=0.01),780.30,780.31,780.32,780.39,780.97,784.3)
chronic.pulm <- c(seq(from=490, to=492.8, by=0.01), seq(from=493, to=493.92, by=0.01),seq(from =494.0, to=494.1, by=0.01),seq(from=495, to=505, by=0.01),506.4)
dm.uncomp <- c(seq(from=250,to=250.33,by=0.01),seq(from=648.0, to=648.04, by=0.01),seq(from=249.0, to=249.31, by=0.01))
dm.comp <- c(seq(from=250.4, to=250.93, by=0.01),775.1,seq(from=249.4, to=249.91, by=0.01))
hypothyroid <- c(seq(from=243, to=244.2, by=0.01),244.8,244.9)
renal <- c(585.3,585.4,585.5,585.6,585.9, 403.01,403.11,403.91,404.02,404.12,404.92, 404.03,404.13,404.93)
liver <- c(70.22,70.23,70.32,70.33,70.44,70.54,456,456.1,456.2,456.21,571,571.2,571.3,seq(from=571.4, to=571.49, by=0.01),571.5,571.6,571.8,571.9,572.3,572.8)
pud <- c(531.41,531.51,531.61,531.7,531.71,531.91,532.41,532.51,532.61,532.7,532.71,532.91,533.41,533.51,533.61,533.7,533.71,533.91,534.41,534.51,534.61,534.7,534.71,534.91)
hiv <- c(seq(from=42, to=44.9, by=0.01))
lymphoma <- c(seq(from=200,to=202.38, by=0.01),seq(from=202.5,to=203.01, by=0.01),238.6,273.3,seq(from=203.02,to=203.82, by=0.01))
mets <- c(seq(from=196,to=199.1, by=0.01),seq(from=209.7,to=209.75, by=0.01),209.79,789.51)
solid.tumor <- c(seq(from=140,to=172.9, by=0.01),seq(from=174,to=175.9, by=0.01),seq(from=179,to=195.8, by=0.01),seq(from=209.0,to=209.24, by=0.01),seq(from=209.25,to=209.3, by=0.01),seq(from=209.31,to=209.36, by=0.01),seq(from=258.01,to=258.03, by=0.01)  )
rheum <- c(701,seq(from=710,to=710.9, by=0.01),seq(from=714,to=714.9, by=0.01),seq(from=720,to=720.9, by=0.01),725)
coag <- c(seq(from=286.0,to=286.9, by=0.01),287.1,seq(from=287.3,to=287.5, by=0.01),seq(from=649.3,to=649.34, by=0.01),289.84)
obesity <- c(278.0,278.01,278.03,seq(from=649.1,to=649.14, by=0.01),793.91)
wt.loss <- c(seq(from=260,to=263.9, by=0.01),783.21,783.22)
lytes <- c(seq(from=276,to=276.9, by=0.01))
anemia.loss <- c(280,seq(from=648.2,to=648.24, by=0.01))
anemia.def <- c(seq(from=280.1,to=281.9, by=0.01),seq(from=285.21,to=285.29, by=0.01),285.9)
etoh <- c(seq(from=291.0,to=291.3, by=0.01),291.5,291.8,291.81,291.82,291.89,291.9,seq(from=303.0,to=303.93, by=0.01),seq(from=305,to=305.03, by=0.01))
drugs <- c(292,seq(from=292.82,to=292.89, by=0.01),292.9,seq(from=304,to=304.93, by=0.01),seq(from=305.2,to=305.93, by=0.01),seq(from=648.3,to=648.34, by=0.01))
psychoses <- c(seq(from=295,to=298.9, by=0.01),299.1,299.11)
depression <- c(300.4,301.12,309,309.1,311)
ahrq.list <- list(chf,valve,pulm.circ,pvd,htn,paralysis,neuro.other,chronic.pulm,dm.uncomp,dm.comp,hypothyroid,renal,liver,pud,hiv,lymphoma,mets,solid.tumor,rheum,coag,obesity,wt.loss,lytes,anemia.loss,anemia.def,etoh,drugs,psychoses,depression)
n.rows <- length(input.frame[,1])
n.cols <- length(input.frame[1,])
output.frame <- matrix(0, nrow=n.rows, ncol=29)
for (i in 1:n.rows){
for (j in 1:n.cols) {
for (k in 1:length(ahrq.list)){
for (m in 1:length(ahrq.list[[k]])) {
if (input.frame[i, j] == ahrq.list[[k]][m]) {
output.frame[i,k] <- 1
}
}
}
}
}
#Apply the elixhauser hierarchy
for (i in 1:length(output.frame[,1])){
if (output.frame[i,10]==1) {output.frame[i,9] <- 0}
if (output.frame[i,17]==1) {output.frame[i,18] <- 0}
}
output.frame <- as.data.frame(output.frame)
colnames(output.frame) <- c("CHF","VALVE","PULM.CIRC","PVD","HTN","PARALYSIS","NEURO.OTHER","CHRONIC.PULM","DM.UNCOMP","DM.COMP","HYPOTHYROID","RENAL","LIVER","PUD","HIV","LYMPHOMA","METS","SOLID.TUMOR","RHEUM","COAG","OBESITY","WT.LOSS","LYTES","ANEMIA.LOSS","ANEMIA.DEF","ETOH","DRUGS","PSYCHOSES","DEPRESSION" )
return(output.frame)
}
#The following function sums the points in the comorbidites matrix produced above
total.points <- function (input.frame) {
n.rows <- length(input.frame[,1])
output.vector <- matrix(0, nrow=n.rows, ncol=1)
for (i in 1:n.rows) {
output.vector[i] <- sum(input.frame[i,])
}
return(output.vector)
}
interim.frame.1 <- apply.icd9.ahrq(input.frame)
interim.frame.2 <- apply.convert.na(interim.frame.1)
interim.frame.3 <- points.ahrq(interim.frame.2)
POINTS <- total.points(interim.frame.3)
elixhauser.data <- list(POINTS, interim.frame.3)
names(elixhauser.data) <- c("COMORBIDITY.CT", "COMORBIDITIES")
return(elixhauser.data)
}
deyo(mat)
db3
View(db3)
install.packages("medicalrisk")
library(medicalrisk)
??medicalrisk
data(charlson_weights_orig)
charlson_weights_orig
mat
View(mat)
??icd9
mat <- icd9Charlson(comorb_db,return.df=TRUE,isShort=TRUE)
View(mat)
mat <- icd9CharlsonComorbid(comorb_db,return.df=TRUE,isShort=TRUE)
mat <- icd9CharlsonComorbid(comorb_db)
mydf <- data.frame(visitId = c("a", "b", "c"),
icd9 = c("441", "412.93", "044.9"))
mydf
cmb <- icd9ComorbidQuanDeyo(mydf, isShort = FALSE, applyHierarchy = TRUE)
cmb
cmb <- icd9ComorbidQuanDeyo(comorb_db, isShort = FALSE, applyHierarchy = TRUE)
View(cmb)
icd9Charlson(mydf, isShort = FALSE)
icd9Charlson(comorb_db, isShort = FALSE)
View(icd9Charlson(comorb_db, isShort = FALSE))
as.data.frame(icd9Charlson(comorb_db, isShort = FALSE))
View(as.data.frame(icd9Charlson(comorb_db, isShort = FALSE)))
transition_p <- read.csv("~/Desktop/Sepsis QI Project 2015 June/transition_p")
View(transition_p)
temp <- transition_p
View(temp)
View(transition_p)
transition_p
toJSON(transition_p)
fromJSON(toJSON(transition_p))
transition_p <- read.csv("~/Users/nsahni/Dropbox/Transition Paper analysis Nishant an MIke")
transition_p <- read.csv("/Users/nsahni/Dropbox/Transition Paper analysis Nishant an MIke")
transition_p <- read.csv("/Users/nsahni/Dropbox/Transition Paper analysis Nishant an MIke/transition?p")
transition_p <- read.csv("/Users/nsahni/Dropbox/Transition Paper analysis Nishant an MIke/transition_p")
View(transition_p)
temp$in_er.x <- as.factor(temp$in_er.x)
temp$in_er.y <- as.factor(temp$in_er.y)
temp$in_er.x <- relevel(temp$in_er.x,ref=TRUE)
temp$in_er.y <- relevel(temp$in_er.y,ref=TRUE)
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x,family=binomial)
summary(model)
less <- filter(temp,time_to_abx>24 )
cool <- data %>% inner_join(less,by="PAT_ENC_CSN_ID") %>% select(MRN,ADM_DATE_TIME)
temp <- mutate(temp,time_to_abx=ifelse(time_to_abx<0,1,time_to_abx)) ## reviewed the negative times (they were transfers from riverside)
temp <- mutate(temp,time_to_bolus=ifelse(time_to_abx<0,1,time_to_bolus))
temp <- filter(temp, time_to_abx<=48 & time_to_abx>0)
temp$in_er.x <- relevel(temp$in_er.x,"TRUE")
temp$in_er.y <- relevel(temp$in_er.y,"TRUE")
##ed_lact_df <- select(transition_p2,PAT_ENC_CSN_ID,ed_bc_ordered,ed_lact_ordered)
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x,family=binomial)
summary(model)
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[2]] <- c("Antibiotics not administered in the ER")
table2$term[[3]] <- c("IV fluids not administered in the ER")
table2$term[[4]] <- c("Age")
odel <- glm(data=transitions_p, inhospital_death.x~in_er.x+in_er.y+age.x,family=binomial)
odel <- glm(data=transition_p, inhospital_death.x~in_er.x+in_er.y+age.x,family=binomial)
odel
summary(model)
library(gridExtra)
doldrum_abx <- ggplot(data=transition_p,aes(x=as.numeric(time_to_abx),fill=in_er.x))+geom_density(alpha=0.3,colour=grey)+xlim(-2,20)+xlab("Hours to first dose of antibiotics")+ scale_fill_manual(values=c("#f0f0f0","#636363"),labels=c("Given in the  ER","Not given in the ER"),name="")+ggtitle(label = "Distribution of time to antibiotics")
doldrum_ivf <- ggplot(data=transition_p,aes(x=as.numeric(time_to_bolus),fill=in_er.y))+geom_density(alpha=0.3,colour=grey)+xlim(-2,20)+xlab("Hours to first dose of IVF bolus")+ scale_fill_manual(values=c("#f0f0f0","#636363"),labels=c("Given in the  ER","Not given in the ER"),name="")+ggtitle(label = "Distribution of time to IVF bolus")
lact_plot <-ggplot(data=bundle_data,aes(x=as.numeric(ed_arrival_lact),fill=ed_lact_ordered)) + geom_density(alpha=0.3)+xlim(0,20)+ theme(axis.title.x=element_blank()) +ggtitle("Distribution of time to Lactate") +scale_fill_manual(values=c("#f0f0f0","#636363"),labels=c("Drawn in ER","Not drawn in ER"),name="")+xlab("Hours to first lactate draw")
grid.arrange(doldrum_abx,doldrum_ivf,lact_plot)
##order_db2$qi_score <- relevel(as.factor(order_db2$qi_score2),ref=0)
qi_model <- glm(inhospital_death.x~qi_score2+age.x,data=order_db2,family="binomial")
summary(qi_model)
qi_model2 <- lrm(inhospital_death.x~qi_score2,data=order_db2)
prediction <- Predict(qi_model2,qi_score2=seq(0,3,by=1))
prediction <- tbl_df(prediction) ## %>% (qi_score2)
qi_model2 <- lrm(inhospital_death.x~qi_score2,data=order_db2)
prediction <- Predict(qi_model2,qi_score=seq(0,3,by=1))
plot2 <- ggplot(data=prediction,aes(x=qi_score2,y=exp(yhat))) + geom_bar(stat="identity",alpha=0.7) + geom_errorbar(aes(ymin=exp(lower),ymax=exp(upper)),width=0.2) +xlab(c("SERQ1"))+ylab(c("Odds of In-Hospital Death"))
median(order_db2$qi_score2,na.rm=TRUE)
plot2
write.csv("transition_p")
write.csv("transition_p",transition_p)
View(transition_p)
write.csv(transition_p,file = "transition_p")
getwd()
mat
View(mat)
mat <- setnames(mat,VisitId,PAT_ENC_CSN_ID)
names(mat)
mat <- setnames(mat,visitId,PAT_ENC_CSN_ID)
mat <- setnames(mat,visitId,"PAT_ENC_CSN_ID")
mat <- setnames(mat,"visitId","PAT_ENC_CSN_ID")
View(mat)
tp_ver2 <- left_join(transitions_p,mat,by="PAT_ENC_CSN_ID")
tp_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSN_ID")
str(mat)
type(mat$PAT_ENC_CSN_ID) <- integer
as.integer(mat$PAT_ENC_CSN_ID) <- integer
as.integer(mat$PAT_ENC_CSN_ID)
as.factor(transition_p$PAT_ENC_CSN_ID)
transition_p$PAT_ENC_CSC_ID <- as.factor(transition_p$PAT_ENC_CSN_ID)
p_ver2 <- left_join(transitions_p,mat,by="PAT_ENC_CSN_ID")
p_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSN_ID")
str(mat)
str(transition_p)
comorb_db <- select(db2,visitId,icd9)
mat <- icd9Charlson(comorb_db,return.df=TRUE,isShort=TRUE)
mat <- setnames(mat,"visitId","PAT_ENC_CSC_ID")
tp_ver2 <- left_join(transitions_p,mat,by="PAT_ENC_CSC_ID")
comorb_db <- select(db2,visitId,icd9)
mat <- icd9Charlson(comorb_db,return.df=TRUE,isShort=TRUE)
mat <- setnames(mat,"visitId","PAT_ENC_CSC_ID")
tp_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSC_ID")
View(tp_ver2)
mat <- setnames(mat,"visitId","PAT_ENC_CSN_ID")
tp_ver2 <- left_join(transitions_p,mat,by="PAT_ENC_CSN_ID")
mat <- setnames(mat,"visitId","PAT_ENC_CSN_ID")
tp_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSN_ID")
mat
transition_p
comorb_db <- select(db2,visitId,icd9)
mat <- icd9Charlson(comorb_db,return.df=TRUE,isShort=TRUE)
mat <- setnames(mat,"visitId","PAT_ENC_CSC_ID")
tp_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSC_ID")
tp_ver2 <- left_join(transition_p,mat,by="PAT_ENC_CSC_ID") %>% select(.,-PAT_ENC_CSC_ID)
View(tp_ver2)
model <- glm(data=tp_ver2, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
transition_p <- tp_ver2
getwd()
model
summary(model)
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2
table2$term[[2]] <- c("Antibiotics not administered in the ER")
table2$term[[3]] <- c("IV fluids not administered in the ER")
table2$term[[4]] <- c("Age")
table2
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[2]] <- c("Antibiotics administered in the ER")
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2
table2
View(table2)
temp$in_er.x <- as.factor(temp$in_er.x)
temp$in_er.y <- as.factor(temp$in_er.y)
temp$in_er.x <- relevel(temp$in_er.x,ref=TRUE)
temp$in_er.y <- relevel(temp$in_er.y,ref=TRUE)
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[2]] <- c("Antibiotics administered in the ER")
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2
View(table2)
model$in_er.x <- relevel(temp$in_er.x,"TRUE")
model$in_er.y <- relevel(temp$in_er.y,"TRUE")
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[2]] <- c("Antibiotics administered in the ER")
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
View(table2)
model$in_er.x <- relevel(temp$in_er.x,"FALSE")
model$in_er.y <- relevel(temp$in_er.y,"FALSE")
transition_p$in_er.x <- relevel(transition_p$in_er.x,"TRUE")
transition_p$in_er.y <- relevel(transition_p$in_er.y,"TRUE")
str(transition_p)
transition_p$in_er.x <- relevel(as.factor(transition_p$in_er.x),"TRUE")
transition_p$in_er.y <- relevel(as.factor(transition_p$in_er.y),"TRUE")
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
summary(model)
model <- glm(data=transition_p, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
summary(model)
table <- tbl_df(tidy(model))
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[2]] <- c("Antibiotics administered in the ER")
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
View(table2)
transition_p$in_er.x <- relevel(as.factor(transition_p$in_er.x),"TRUE")
transition_p$in_er.y <- relevel(as.factor(transition_p$in_er.y),"TRUE")
model <- glm(data=temp, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
model <- glm(data=transition_p, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2$term[[2]] <- c("Antibiotics administered in the ER")
View(table2)
transition_p$in_er.x <- relevel(as.factor(transition_p$in_er.x),"TRUE")
transition_p$in_er.y <- relevel(as.factor(transition_p$in_er.y),"TRUE")
model <- glm(data=transition_p, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2$term[[2]] <- c("Antibiotics administered in the ER")
View(table2)
model <- glm(data=transition_p, ~in_er.x~age.x+Charlson,family=binomial)
summary(model)
model <- glm(data=transition_p, in_er.x~age.x+Charlson,family=binomial)
summary(model)
model <- glm(data=transition_p, Charlson~age.x,family=binomial)
summary(model)
summary(model)
model <- glm(data=transition_p, Charlson~age.x,family=binomial)
summary(model)
model <- lm(data=transition_p, Charlson~age.x,family=binomial)
summary(model)
View(table2)
library(xtable)
xtable(table2)
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.) %>% table[1] <- NULL
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.) %>% select(-1)
View(table2)
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
View(table2)
table2[,1]
table2[1]
table2[[1]]
table2[[1,]]
table2[1,]
table2[2,]
table2[1,] <- NULL
table2[1,]
xtable(table2)
table2
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2$term[[2]] <- c("Antibiotics administered in the ER")
View(table2)
table2
qi_model2 <- lrm(inhospital_death.x~qi_score_lac+Charlson+age.x,data=transition_p)
prediction <- Predict(qi_model2,qi_score=seq(0,4,by=1))
plot1 <- ggplot(data=prediction,aes(x=qi_score_lac,y=exp(yhat))) + geom_bar(stat="identity",alpha=0.7) + geom_errorbar(aes(ymin=exp(lower),ymax=exp(upper)),width=0.2) +xlab(c("SERQ2"))+ylab(c("Odds of In-Hospital Death"))
plot1
##order_db2$qi_score <- relevel(as.factor(order_db2$qi_score_lac),ref=0)
qi_model <- glm(inhospital_death.x~qi_score_lac+age.x+Charlson,data=order_db2,family="binomial")
summary(qi_model)
library(rms)
qi_model2 <- lrm(inhospital_death.x~qi_score_lac,data=order_db2)
prediction <- Predict(qi_model2,qi_score_lac=seq(0,4,by=1))
prediction <- tbl_df(prediction)
qi_model2 <- lrm(inhospital_death.x~qi_score_lac,data=order_db2)
prediction <- Predict(qi_model2,qi_score=seq(0,4,by=1))
plot1 <- ggplot(data=prediction,aes(x=qi_score_lac,y=exp(yhat))) + geom_bar(stat="identity",alpha=0.7) + geom_errorbar(aes(ymin=exp(lower),ymax=exp(upper)),width=0.2) +xlab(c("SERQ2"))+ylab(c("Odds of In-Hospital Death"))
plot1
qi_model2 <- lrm(inhospital_death.x~qi_score_lac+age.x+Charlson,data=transition_p)
names(order+db2)
names(order_db2
)
order_db2 <- left_join(order_db,mat,by="PAT_ENC_CSN_ID")
order_db2 <- left_join(order_db2,mat,by="PAT_ENC_CSN_ID")
order_db2 <- left_join(order_db2,mat,by="PAT_ENC_CSC_ID")
mat
names(mat)
str(order)db2
xtable(table2)
library(stargazer)
install.packages("stargazer")
library(stargazer)
?"stargazer"
stargazer(table2)
stargazer(table2,type="latex")
xtable(table2)
table2
View(table2)
stargazer(table2)
library(stargazer)
stargazer(table2)
\end{table}
View(table2)
xtable(table2)
library(xtable)
xtable(table2)
.04 & 1.77 & 1.34 & 2.33 \\
4 & Age & 0.01 & 0.01 & 1.90 & 0.06 & 1.01 & 1.01 & 1.02 \\
5 & Charlson & 0.31 & 0.17 & 1.86 & 0.06 & 1.36 & 1.15 & 1.61 \\
\hline
\end{tabular}
\end{table}
\end{document}
install.packages('pander')
library(devtools)
install_github('pander', 'Rapporter')
pandoc.table(mtcars[1:3, 1:4])
librar(pandoc)
library(pandoc)
install.packages("pandoc")
library(pandoc)
icd9Charlson??
??icd9Charlson
l <- list(
+        "First list element",
+        paste0(1:5, '. subelement'),
+        "Second element",
+        list('F', 'B', 'I', c('phone', 'pad', 'talics')))
l <- list("First list element",paste0(1:5, '. subelement'),"Second element",list('F', 'B', 'I', c('phone', 'pad', 'talics')))
pan.doc(l)
pandoc.list()
library(pander)
pandoc.list()
pandoc.list(l,"roman")
pandoc.table(mtcars[1:3, 1:4])
table2
pandoc.table(table2)
Pandoc.brew(pandoc.table(table2))
Pander.brew(pandoc.table(table2))
pander.brew(pandoc.table(table2))
table2$term[[3]] <- c("IV fluids administered in the ER")
transition_p$in_er.x <- relevel(as.factor(transition_p$in_er.x),"TRUE")
transition_p$in_er.y <- relevel(as.factor(transition_p$in_er.y),"TRUE")
model <- glm(data=transition_p, inhospital_death.x~in_er.x+in_er.y+age.x+Charlson,family=binomial)
table2 <- table %>% mutate(Odds=round(exp(estimate),2)) %>% mutate(Lower_bounds=round(exp(estimate-std.error),2),.) %>% mutate(Upper_bounds=round(exp(estimate+std.error),2),.)
table2$term[[3]] <- c("IV fluids administered in the ER")
table2$term[[4]] <- c("Age")
table2$term[[2]] <- c("Antibiotics administered in the ER")
View(table2)
pandoc.table(table2)
myReport <- Pandoc$new()
myReport$add(table2)
myReport
myReport$format <- 'docx'
myReport$export(tempfile())
readLines(system.file('includes/html/footer.html', package='pander'))
myReport$format <- 'docx'
myReport$export(tempfile())
myReport$format <- 'docx'
myReport$export(tempfile())
myReport
devs <-
list(
p1=list(name="Ken",age=24,
interest=c("reading","music","movies"),
lang=list(r=2,csharp=4)),
p2=list(name="James",age=25,
interest=c("sports","music"),
lang=list(r=3,java=2,cpp=5)),
p3=list(name="Penny",age=24,
interest=c("movies","reading"),
lang=list(r=1,cpp=4,python=2)))
devs
list.select(devs,name,age)
library(rlist)
list.select(devs,name,age)
list.select
devs
dev$p3
devs$ps[[]]
devs$p3
devs$p3$age
devs$p3$age$lang
devs$p3$lang
list.select(devs,lang)
list.select(devs,lang,r)
list.select(devs,r)
list.select(devs,lang)
list.select(devs,lang$python)
list.select(devs,lang$r)
list.select(devs,lang$r>lang$python)
x <- list.select(devs,lang$r>lang$python)
list.select(x,FALSE)
x
str(x)
x[x==TRUE]
x[x=TRUE]
x[x=FALSE]
x <- list.select(devs,lang$r>lang$python)
x
toJSON(x)
library(jsonlite)
toJSON(x)
fromJSON(toJSON(x))
toJSON(x)
list.stack(toJSON(x))
list.stack((x))
x <- list.filter(devs,lang$r>lang$python)
x
x
devs
y <- list.filter("movies %in% in interest)
)
y <- list.filter(movies %in% in interest)
y <- list.filter("movies" %in% in interest)
y <- list.filter("movies" %in%  interest)
y <- list.select(devs,interest)
y
y <- list.select(devs,interest)
list.stack(y)
toJSON(y)
fromJSON(toJSON(y))
stack.list(toJSON(y))
list.stack(y)
install.packages("rmongodb")
library(rmongodb)
library(rmongodb)
help("mongo.create")
mongo <- mongo.create()
mongo
mongo.is.connected(mongo)
help("mongo.create")
mongo <- mongo.create()
mongo
mongo.is.connected(mongo)
